{"version":3,"sources":["logo.svg","components/NewGame.jsx","store/game.js","components/Card.jsx","components/Emoji.jsx","components/StopWatch.jsx","components/PlayGame.jsx","components/GameOver.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","NewGame","history","useHistory","startNewGame","difficulty","push","className","src","logo","alt","width","height","onClick","CardState","initGame","level","getShuffledCards","count","status","Array","from","length","_","i","sort","Math","random","map","p","point","cardset1","cardset2","refresh","PlayTypes","toggleStateInSameCardset","cardset","card","selectedCard","find","c","undefined","updateStateBetweenCardset","setTimeout","gameReducer","state","action","type","interval","cards1","cards2","payload","useStyles","createUseStyles","marginLeft","marginRight","marginTop","marginBottom","display","alignItems","justifyContent","outline","border","borderRadius","cardClosed","extend","backgroundColor","color","transform","to","cardGreen","animationName","animationDuration","animationTimingFunction","cardRed","cardHidden","ClosedCard","onClickCarset","style","OpenGreenCard","OpenRedCard","HiddenCard","Card","Emoji","mood","size","forwardRef","props","ref","useState","active","setActive","tick","setTick","timeSpan","tickCount","time","Date","setSeconds","moment","format","useEffect","useImperativeHandle","start","stop","timeUsed","font-scale","PlayGame","match","params","useReducer","game","dispatch","setMood","finished","setFinished","timerRef","useRef","onClickCardset1","onClickCardset2","current","ms","Promise","res","then","filter","duration","index","key","GameOver","event","preventDefault","App","path","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0828bef1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nimport logo from '../logo.svg';\r\n\r\nconst NewGame = () => {\r\n    let history = useHistory();\r\n\r\n    function startNewGame(difficulty) {\r\n        history.push(`/PlayGame/${difficulty}`);\r\n    }\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"d-flex justify-content-center\">\r\n                <img src={logo} alt=\"LOGO\" width=\"60\" height=\"60\" />\r\n                <h1>Matching Game</h1>\r\n            </div>\r\n    \r\n            <h5 className=\"center-text\">Please select game difficulty</h5>\r\n    \r\n            <div className=\"d-flex justify-content-center\">\r\n                <button className=\"btn-lg mx-6\" onClick={() => startNewGame(3)}>Easy</button>\r\n                <button className=\"btn-lg btn-primary mx-6\" onClick={() => startNewGame(10)}>Medium</button>\r\n                <button className=\"btn-lg btn-danger mx-6\" onClick={() => startNewGame(25)}>Hard</button>\r\n            </div>\r\n        </div>\r\n    );    \r\n}\r\n\r\nexport default NewGame;\r\n","\r\nconst CardState = {\r\n  Closed: 0, OpenGreen: 1, OpenRed: 2, Hidden: 3\r\n};\r\n\r\nconst initGame = (level) => {\r\n  function getShuffledCards(count, status) {\r\n    const pts = Array.from({length: count}, (_, i) => i).sort(() => Math.random() - 0.5);\r\n    const cards = pts.map(p => {\r\n      return { point: p, status: status };\r\n    });\r\n    return cards;\r\n  }\r\n\r\n  return { \r\n    difficulty: level, \r\n    cardset1: getShuffledCards(level, CardState.Closed),\r\n    cardset2: getShuffledCards(level, CardState.Closed),\r\n    refresh: 0\r\n  };\r\n};\r\n\r\nconst PlayTypes = {\r\n  clickUno: \"clickUno\",\r\n  clickDue: \"clickDue\",\r\n  refresh: \"refresh\"\r\n};\r\n\r\nfunction toggleStateInSameCardset(cardset, card) {\r\n  const selectedCard = cardset.find(c => c.status === CardState.OpenGreen);\r\n  if (selectedCard !== undefined) {\r\n    selectedCard.status = CardState.Closed;\r\n    card.status = CardState.OpenGreen;\r\n  }\r\n}\r\n\r\nfunction updateStateBetweenCardset(cardset, card) {\r\n  const selectedCard = cardset.find(c => c.status === CardState.OpenGreen);\r\n  if (selectedCard !== undefined) {\r\n    if(selectedCard.point === card.point) {\r\n      card.status = CardState.OpenGreen;\r\n      const interval = 1000;\r\n      setTimeout (() => {\r\n        selectedCard.status = CardState.Hidden;\r\n        card.status = CardState.Hidden;\r\n      }, interval);\r\n      return interval;\r\n    } else {\r\n      card.status = CardState.OpenRed;\r\n      const interval = 3000;\r\n      setTimeout (() => {\r\n        card.status = CardState.Closed;\r\n      }, interval);\r\n      return interval;\r\n    }\r\n  } else {\r\n    card.status = CardState.OpenGreen;\r\n    return 0;\r\n  }\r\n}      \r\n\r\nconst gameReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case PlayTypes.clickUno: {\r\n      let interval = 0;\r\n      const cards1 = [...state.cardset1];\r\n      const cards2 = [...state.cardset2];\r\n      const card = cards1.find(c => c.point === action.payload.point);\r\n      if(card !== undefined) {\r\n        toggleStateInSameCardset(cards1, card);\r\n        interval = updateStateBetweenCardset(cards2, card);\r\n      }\r\n      return { ...state, cardset1: cards1, cardset2: cards2, refresh: interval };        \r\n    }\r\n\r\n    case PlayTypes.clickDue: {\r\n      let interval = 0;\r\n      const cards1 = [...state.cardset1];\r\n      const cards2 = [...state.cardset2];\r\n      const card = cards2.find(c => c.point === action.payload.point);\r\n      if(card !== undefined) {\r\n        toggleStateInSameCardset(cards2, card);\r\n        interval = updateStateBetweenCardset(cards1, card);\r\n      }\r\n      return { ...state, cardset1: cards1, cardset2: cards2, refresh: interval };        \r\n    }\r\n\r\n    case PlayTypes.refresh: {\r\n      return { ...state, refresh: 0 };        \r\n    }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default gameReducer;\r\nexport { CardState, initGame, PlayTypes };\r\n","import React, { useState, useEffect } from 'react';\r\nimport { createUseStyles } from \"react-jss\";\r\n\r\nimport { CardState } from '../store/game';\r\n\r\nconst useStyles = createUseStyles({\r\n    card: {\r\n        width: 50,\r\n        height: 50,\r\n        marginLeft: 10,\r\n        marginRight: 10,\r\n        marginTop: 10,\r\n        marginBottom: 10,\r\n        display: \"flex\",\r\n        alignItems: \"center\",\r\n        justifyContent: \"center\",\r\n        outline: \"none !important\",\r\n        border: \"0px solid\",\r\n        borderRadius: 4\r\n    },\r\n    cardClosed: {\r\n        extend: \"card\",\r\n        backgroundColor: \"white\"\r\n    },\r\n    '@keyframes spin-to-green': {\r\n        from: {\r\n            color: \"black\",\r\n            backgroundColor: \"white\",\r\n            transform: \"rotateY(180deg)\"\r\n        },\r\n        to: {\r\n            color: \"white\",\r\n            backgroundColor: \"green\",\r\n            transform: \"rotateY(0deg)\"\r\n        }\r\n    },\r\n    cardGreen: {\r\n        extend: \"card\",\r\n        color: \"white\",\r\n        backgroundColor: \"green\",\r\n        animationName: \"$spin-to-green\",\r\n        animationDuration: \"0.5s\",\r\n        animationTimingFunction: \"linear\"\r\n    },\r\n    '@keyframes spin-to-red': {\r\n        from: {\r\n            transform: \"rotateY(180deg)\"\r\n        },\r\n        to: {\r\n            transform: \"rotateY(0deg)\"\r\n        }\r\n    },\r\n    cardRed: {\r\n        extend: \"card\",\r\n        color: \"white\",\r\n        backgroundColor: \"red\",\r\n        animationName: \"$spin-to-red\",\r\n        animationDuration: \"0.5s\",\r\n        animationTimingFunction: \"linear\"\r\n    },\r\n    '@keyframes spin-to-hidden': {\r\n        from: {\r\n            backgroundColor: \"green\"\r\n        },\r\n        to: {\r\n            backgroundColor: \"transparent\",\r\n            border: \"0px white\"\r\n        }\r\n    },\r\n    cardHidden: {\r\n        extend: \"card\",\r\n        animationName: \"$spin-to-hidden\",\r\n        animationDuration: \"0.5s\",\r\n        animationTimingFunction: \"ease-out\"\r\n    }\r\n});\r\n\r\nconst ClosedCard = ({ point, onClickCarset }) => {\r\n    const style = useStyles();\r\n    return (\r\n        <button className={style.cardClosed} onClick={() => onClickCarset(point)}></button>\r\n    );\r\n};\r\n\r\nconst OpenGreenCard = ({ point }) => {\r\n    const style = useStyles();\r\n    return (\r\n        <div className={style.cardGreen}>{point}</div>\r\n    );\r\n};\r\n\r\nconst OpenRedCard = ({ point }) => {\r\n    const style = useStyles();\r\n    return (\r\n        <div className={style.cardRed}>{point}</div>\r\n    );\r\n};\r\n\r\nconst HiddenCard = () => {\r\n    const style = useStyles();\r\n    return (\r\n        <div className={style.cardHidden}></div>\r\n    );\r\n};\r\n\r\nconst Card = ({ card, onClickCarset }) => {\r\n    const status = card.status;\r\n    if(status === CardState.Closed) {\r\n        return <ClosedCard point={card.point} onClickCarset={onClickCarset} />;\r\n    } else if(status === CardState.OpenGreen) {\r\n        return <OpenGreenCard point={card.point} />\r\n    } else if(status === CardState.OpenRed) {\r\n        return <OpenRedCard point={card.point} />\r\n    } else {  // must be CardState.Hidden\r\n        return <HiddenCard />\r\n    }\r\n};\r\n\r\nexport default Card;\r\n","import React from 'react';\r\n\r\nimport { FiSmile, FiMeh, FiFrown } from \"react-icons/fi\";\r\n\r\nconst Emoji = ({ mood }) => {\r\n    if(mood === 1) {\r\n        return <FiSmile color=\"green\" size=\"28px\" />;\r\n    } else if(mood === 2) {\r\n        return <FiFrown color=\"red\" size=\"28px\" />;\r\n    } else {\r\n        return <FiMeh color=\"Black\" size=\"28px\" />;\r\n    }\r\n}\r\n\r\nexport default Emoji;","import React, { useState, useEffect, forwardRef, useImperativeHandle } from 'react';\r\nimport moment from 'moment';\r\n\r\nconst StopWatch = (props, ref) => {\r\n    const [active, setActive] = useState(false);\r\n    const [tick, setTick] = useState(0);\r\n\r\n    useEffect(() => {\r\n        if(active) {\r\n            setTimeout(() => setTick(tick + 1), 1000);    \r\n        }\r\n    });\r\n\r\n    function timeSpan(tickCount) {\r\n        let time = new Date(0,0,0,0,0,0);\r\n        time.setSeconds(tickCount);\r\n        return moment(time).format('HH:mm:ss');\r\n    }\r\n\r\n    useImperativeHandle(ref, () => ({\r\n        start: () => setActive(true),\r\n        stop: () => setActive(false),\r\n        timeUsed: () => { return timeSpan(tick) }\r\n    })\r\n    );\r\n\r\n    return ( <span font-scale=\"1.5\">{ timeSpan(tick) }</span> );\r\n};\r\n\r\nexport default forwardRef(StopWatch);","import React, { useState, useReducer, useEffect, useRef } from 'react';\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nimport Card from './Card';\r\nimport Emoji from './Emoji';\r\nimport StopWatch from './StopWatch';\r\n\r\nimport gameReducer, { CardState, initGame, PlayTypes } from '../store/game';\r\n\r\nconst PlayGame = (props) => {\r\n    let history = useHistory();\r\n\r\n    const level = props.match.params.difficulty;\r\n    const [game, dispatch] = useReducer(gameReducer, level, initGame);\r\n    const cardset1 = game.cardset1;\r\n    const cardset2 = game.cardset2;\r\n\r\n    const [mood, setMood] = useState(0);\r\n    const [finished, setFinished] = useState(false);\r\n\r\n    const timerRef = useRef(null);\r\n\r\n    useEffect(() => { \r\n        timerRef.current.start();\r\n    }, []);\r\n\r\n    function checkAndStop() {\r\n        const remainingCards = \r\n            cardset1.filter(c => c.status !== CardState.Hidden).length + \r\n            cardset2.filter(c => c.status !== CardState.Hidden).length;   \r\n        if(remainingCards === 0)\r\n            setFinished(true);\r\n    }\r\n\r\n    function sleep(ms) {\r\n        return new Promise(res => setTimeout(res, ms));\r\n    }\r\n\r\n    useEffect(() => {\r\n        const interval = game.refresh;\r\n        if(interval !== 0) {\r\n            (interval === 3000) ? setMood(2) : setMood(1);\r\n            sleep(interval).then(() => {\r\n                dispatch({ type: PlayTypes.refresh, payload: { } });\r\n                setMood(0);\r\n                checkAndStop();  \r\n            });\r\n        }\r\n        else {\r\n            if(finished) {\r\n                timerRef.current.stop();\r\n                const duration = timerRef.current.timeUsed();\r\n                history.push(`/GameOver/${duration}`);\r\n            } else {\r\n                setMood(0);\r\n            }\r\n        }\r\n    });\r\n\r\n    function onClickCardset1(point) {\r\n        dispatch({ type: PlayTypes.clickUno, payload: { point: point } });\r\n    }\r\n\r\n    function onClickCardset2(point) {\r\n        dispatch({ type: PlayTypes.clickDue, payload: { point: point } });\r\n    }\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"d-flex justify-content-around align-items-center mt-2\">\r\n                <Emoji mood={mood} />\r\n                <h3>Play Game</h3>\r\n                <StopWatch ref={timerRef} />\r\n            </div>\r\n\r\n            <div className=\"d-flex flex-wrap card-set\">\r\n                {cardset1.map((card, index) => \r\n                    <Card key={index} card={card} onClickCarset={onClickCardset1} />\r\n                )}\r\n            </div>\r\n\r\n            <p />\r\n\r\n            <div className=\"d-flex flex-wrap card-set\">\r\n                {cardset2.map((card, index) => \r\n                    <Card key={index} card={card} onClickCarset={onClickCardset2} />\r\n                )}\r\n            </div>\r\n        </div>    \r\n    );\r\n}\r\n\r\nexport default PlayGame;\r\n","import React from 'react';\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst GameOver = (props) => {\r\n    let history = useHistory();\r\n\r\n    const duration = props.match.params.duration;\r\n\r\n    function playAgain(event) {\r\n        event.preventDefault();\r\n        history.push(\"/NewGame\");\r\n    }\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <h1 className=\"center-text\">Game Over</h1>\r\n            <h5 className=\"center-text\">Time used: {duration}</h5>\r\n            <div className=\"d-flex justify-content-center\">\r\n                <button className=\"btn-lg\" onClick={playAgain}>Play Again</button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default GameOver;\r\n","import React from 'react';\nimport { BrowserRouter as Router, Switch, Route, Redirect } from \"react-router-dom\";\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\nimport NewGame from './components/NewGame';\nimport PlayGame from './components/PlayGame';\nimport GameOver from './components/GameOver';\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <Switch>\n          <Route path=\"/NewGame\" component={NewGame} />\n          <Route path=\"/PlayGame/:difficulty\" component={PlayGame} />\n          <Route path=\"/GameOver/:duration\" component={GameOver} />\n          <Route path=\"/\">\n            <Redirect to=\"/NewGame\" />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}